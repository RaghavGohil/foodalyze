//This is the AI's schema 

model SearchHistory {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  product   Product  @relation(fields: [productId], references: [id])
  productId Int
  data      String // AI response in markdown
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

//This is the products's schema 

model Product {
  id   Int   @id @default(autoincrement())
  data Json?

  searchHistory SearchHistory[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "./client"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

//This is the user's schema 

//User creation and login and sign up details
enum Gender {
  MALE
  FEMALE
  OTHER
}

model User {
  //actual data
  id       Int    @id @default(autoincrement())
  name     String
  phone    Int
  email    String
  password String
  gender   Gender

  //reverse relation fields
  userInformation UserInformation[]
  searchHistory   SearchHistory[]

  //metadata
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

//Important information for suggestions, etc
enum DietaryPreference {
  VEGETARIAN
  VEGAN
  KETO
  PALEO
  LOW_CARB
  OMNIVORE
}

enum ActivityLevel {
  SEDENTARY
  LIGHT
  MODERATE
  ACTIVE
  VERY_ACTIVE
}

enum HealthCondition {
  CARDIOVASCULAR
  UNDERWEIGHT
  OBESE
  NAFLD
  HYPERTENSION
  DIABETES_TYPE_1
  DIABETES_TYPE_2
  PRE_DIABETIC
  NONE
}

model UserInformation {
  id                Int               @id @default(autoincrement())
  bmi               Float
  dietaryPref       DietaryPreference
  activityLevel     ActivityLevel
  healthConditions  HealthCondition[] // array of enums
  allergies         String[] // or you can normalize to a table
  preferredCuisines String[]
  avoidedCuisines   String[]
  medications       String[] // or relate to a separate Medications table

  userId Int  @unique
  user   User @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
